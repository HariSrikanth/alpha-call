#!/bin/bash

# Google Cloud SQL Setup Script for AI Voice Assistant
# This script creates a PostgreSQL instance on Google Cloud SQL

set -e

# Configuration
PROJECT_ID="${GOOGLE_CLOUD_PROJECT:-$(gcloud config get-value project)}"
REGION="${REGION:-us-central1}"
INSTANCE_NAME="${INSTANCE_NAME:-voice-assistant-db}"
DATABASE_NAME="${DATABASE_NAME:-voice_assistant}"
DB_USER="${DB_USER:-postgres}"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo "🗄️  Setting up Google Cloud SQL Database for AI Voice Assistant"
echo "=" * 60

# Check if gcloud is installed
if ! command -v gcloud &> /dev/null; then
    echo -e "${RED}❌ Google Cloud CLI is not installed. Please install it first.${NC}"
    exit 1
fi

# Check if project is set
if [ -z "$PROJECT_ID" ]; then
    echo -e "${RED}❌ Google Cloud project not set. Please set GOOGLE_CLOUD_PROJECT or run 'gcloud config set project YOUR_PROJECT_ID'${NC}"
    exit 1
fi

echo -e "${GREEN}📋 Configuration:${NC}"
echo "   Project ID: $PROJECT_ID"
echo "   Region: $REGION"
echo "   Instance Name: $INSTANCE_NAME"
echo "   Database Name: $DATABASE_NAME"
echo "   DB User: $DB_USER"
echo

# Enable required APIs
echo -e "${YELLOW}🔌 Enabling required APIs...${NC}"
gcloud services enable sqladmin.googleapis.com --project=$PROJECT_ID
echo -e "${GREEN}✅ APIs enabled${NC}"

# Check if instance already exists
if gcloud sql instances describe $INSTANCE_NAME --project=$PROJECT_ID &> /dev/null; then
    echo -e "${YELLOW}⚠️  Instance $INSTANCE_NAME already exists. Skipping creation.${NC}"
else
    # Create Cloud SQL instance
    echo -e "${YELLOW}🏗️  Creating Cloud SQL PostgreSQL instance...${NC}"
    gcloud sql instances create $INSTANCE_NAME \
        --database-version=POSTGRES_15 \
        --tier=db-f1-micro \
        --region=$REGION \
        --storage-type=SSD \
        --storage-size=10GB \
        --storage-auto-increase \
        --backup-start-time=02:00 \
        --maintenance-window-day=SUN \
        --maintenance-window-hour=03 \
        --project=$PROJECT_ID

    echo -e "${GREEN}✅ Cloud SQL instance created${NC}"
fi

# Set a random password for the postgres user
echo -e "${YELLOW}🔐 Setting database password...${NC}"
DB_PASSWORD=$(openssl rand -base64 32)
gcloud sql users set-password $DB_USER \
    --instance=$INSTANCE_NAME \
    --password="$DB_PASSWORD" \
    --project=$PROJECT_ID

echo -e "${GREEN}✅ Database password set${NC}"

# Create application database
echo -e "${YELLOW}📊 Creating application database...${NC}"
if ! gcloud sql databases describe $DATABASE_NAME --instance=$INSTANCE_NAME --project=$PROJECT_ID &> /dev/null; then
    gcloud sql databases create $DATABASE_NAME \
        --instance=$INSTANCE_NAME \
        --project=$PROJECT_ID
    echo -e "${GREEN}✅ Database $DATABASE_NAME created${NC}"
else
    echo -e "${YELLOW}⚠️  Database $DATABASE_NAME already exists${NC}"
fi

# Get connection name
CONNECTION_NAME=$(gcloud sql instances describe $INSTANCE_NAME --project=$PROJECT_ID --format="value(connectionName)")

# Create .env file with database configuration
echo -e "${YELLOW}📝 Creating database configuration...${NC}"
cat >> .env.database << EOF

# Database Configuration (Generated by setup-database.sh)
GOOGLE_CLOUD_SQL_CONNECTION_NAME=$CONNECTION_NAME
DB_USER=$DB_USER
DB_PASSWORD=$DB_PASSWORD
DB_NAME=$DATABASE_NAME

EOF

echo -e "${GREEN}✅ Database setup complete!${NC}"
echo
echo -e "${GREEN}📋 Database Details:${NC}"
echo "   Connection Name: $CONNECTION_NAME"
echo "   Database Name: $DATABASE_NAME"
echo "   User: $DB_USER"
echo "   Password: $DB_PASSWORD"
echo
echo -e "${YELLOW}🔒 Security Note:${NC}"
echo "   Database password has been saved to .env.database"
echo "   Add these variables to your .env file or App Engine environment"
echo
echo -e "${YELLOW}🚀 Next Steps:${NC}"
echo "   1. Copy the database variables from .env.database to your .env file"
echo "   2. Run database migrations: python -m alembic upgrade head"
echo "   3. Deploy your application to Google Cloud"
echo
echo -e "${GREEN}🎉 Database setup completed successfully!${NC}" 